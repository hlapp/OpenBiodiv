", format = "tsv")
d <- SPARQL(url="http://europeana.ontotext.com/", query="SELECT ?ProvidedCHO
WHERE { ?ProvidedCHO a edm:ProvidedCHO  }
")
d
d <- SPARQL(url="http://europeana.ontotext.com/", query="SELECT ?ProvidedCHO
WHERE { ?ProvidedCHO a edm:ProvidedCHO  }
")
endpoint <- "http://services.data.gov/sparql"
query <-
"PREFIX  dgp1187: <http://data-gov.tw.rpi.edu/vocab/p/1187/>
SELECT ?ye ?fi ?ac
WHERE {
?s dgp1187:year ?ye .
?s dgp1187:fires ?fi .
?s dgp1187:acres ?ac .
}"
qd <- SPARQL(endpoint,query)
qd
library(RCurl)
getURL(url = "http://213.191.204.69:7777/graphdb/sparql")
getURL(url = "http://213.191.204.69:7777/graphdb/sparql", verbose = TRUE)
getURL(url = "http://213.191.204.69:7777/graphdb/sparql?query=SELECT+*+WHERE+{?s+?o+?p}", verbose = TRUE
)
query
getURL(url = endpoint, verbose= TRUE)
getURL(url = paste(endpoint, URLencode(query), sep="?", verbose= TRUE))
getURL(url = paste(endpoint, URLencode(query), sep="?"), verbose= TRUE)
getURL(url = paste(endpoint, URLencode(query), sep="?query="), verbose= TRUE)
endpoint = "http://wdqs-beta.wmflabs.org/bigdata/namespace/wdq/sparql"
query = "select distinct ?type where {
?thing a ?type
}
limit 20"
getURL(url = paste(endpoint, query, sep = "?query="), verbose = TRUE)
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE)
endpoint = "http://dbpedia.org/sparql"
query = "SELECT DISTINCT ?concept
WHERE {
?s a ?concept .
} LIMIT 50"
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE)
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), httpheader=c(Accept="application/csv"), verbose = TRUE)
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE)
getURL(url = paste(paste(endpoint, URLencode(query), sep = "?query="), "formatting=CSV", sep="?"), verbose = TRUE)
getURL(url = paste(paste(endpoint, URLencode(query), sep = "?query="), "formatting=CSV", sep="&"), verbose = TRUE)
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), httpheader=c(Accept="application/sparql-results+csv"), verbose = TRUE)
endpoint = "http://213.191.204.69:7777/graphdb/sparql"
query = "SELECT (COUNT(*) as ?count)
FROM <http://www.ontotext.com/implicit>
WHERE {
?s ?p ?o .
}"
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE)
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE, userpwd = "obkms:1obkms")
query
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE, userpwd = "obkms:1obkms")
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE)
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE, userpwd = "obkms:1obkms")
endpoint
query="select * where {?s ?o ?p}"
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE, userpwd = "obkms:1obkms")
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE, userpwd = "obkms:1obkms")
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE, userpwd = c("obkms:1obkms")
)
library(curl)
install.packages(curl)
install.packages("curl")
library(curl)
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), verbose = TRUE, userpwd = c("obkms:1obkms")
)
curl(url = paste(endpoint, URLencode(query), sep = "?query="), u = c("obkms:1obkms")
)
curl(url = paste(endpoint, URLencode(query), sep = "?query="))
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = c"obkms:1obkms", verbose = TRUE )
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = "obkms:1obkms", verbose = TRUE )
getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = "obkms:1obkms", verbose = TRUE , httpauth= 1L)
r = getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = "obkms:1obkms", verbose = TRUE , httpauth= 1L)
writeLines
writeLines(r, file = "test.html")
?writeLines
writeLines(r, con = file("test.html"))
getWd()
getwd()
query
query="SELECT (COUNT(*) as ?count)
FROM <http://www.ontotext.com/implicit>
WHERE {
?s ?p ?o .
}"
URLencode(query)
?getURL
r = getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = "obkms:1obkms", header = "Accept:text/csv", verbose = TRUE , httpauth= 1L)
r = getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = "obkms:1obkms", header = c("Accept:text/csv"), verbose = TRUE , httpauth= 1L)
r = getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = "obkms:1obkms", httpheader = c(Accept="text/csv"), verbose = TRUE , httpauth= 1L)
r
read.csv(r)
?read.csv
read.csv(textConnection(r))
knitr::opts_chunk$set(echo = TRUE)
crjdburl = "http://www.crossref.org/titlelist/titleFile.csv"
crjdataUrl = "http://www.crossref.org/titlelist/titleFile.csv"
clear(crjdburl)
rm(crjdburl)
crjData = read.csv( getURL( url = crjdataUrl ) )
crjdataUrl = "http://ftp.crossref.org/titlelist/titleFile.csv"
plot(pressure)
crjData = read.csv( getURL( url = crjdataUrl ) )
crjData.csv = getURL( url = crjdataUrl )
head(crjData.csv)
crjData = read.csv( textConnection( crjData.csv ) )
remove(crjData)
save(file = "crjData.csv", crjData.csv)
remove(crjData.csv)
head(journals)
journals$Subjects
levels(journals$Subjects)
library(uuid)
install.packages("uuid")
library(uuid)
UUIDgenerate()
uri = paste("http://id.pensoft.net/subjects/", UUIDgenerate(), sep = "")
uri
query = "
PREFIX fabio: <http://purl.org/spar/fabio/>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
INSERT DATA {
<http://id.pensoft.net/subjects/someid a fabio:SubjectDiscipline ;
dc:title \"sometitle\" .
}"
query
?gsub
uuid= UUIDgenerate()
gsub(
"someid", uuid, query
)
query = "PREFIX fabio: <http://purl.org/spar/fabio/>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
INSERT DATA {
<http://id.pensoft.net/subjects/someid> a fabio:SubjectDiscipline ;
dc:title \"sometitle\" .
}"
query = gsub("someid", uuid)
query = gsub("someid", uuid, query)
query
s = "Peace"
query = gsub("sometitle", as.character(s), query)
query
endpoint
format
graphDbExec = function ( query, returnFormat = "text/csv" ) {
# config : change this if you change your database
endpoint = "http://213.191.204.69:7777/graphdb/sparql"
userpwd = "obkms:1obkms"
# exec
r = getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = userpwd, httpheader = c(Accept=returnFormat), verbose = TRUE , httpauth= 1L)
}
query
graphDbExec(query)
query
r = graphDbExec(query)
r
query
graphDbExec = function ( query, returnFormat = "text/csv", update = FALSE ) {
# config : change this if you change your database
endpoint = "http://213.191.204.69:7777/graphdb/sparql"
updateEndpoint = "http://213.191.204.69:7777/graphdb/update"
userpwd = "obkms:1obkms"
# exec
if (update) endpoint = updateEndpoint
r = getURL(url = paste(endpoint, URLencode(query), sep = "?query="), userpwd = userpwd, httpheader = c(Accept=returnFormat), verbose = TRUE , httpauth= 1L)
}
graphDbExec(query, update = TRUE)
r = graphDbExec(query, update = TRUE)
r
query = 'PREFIX fabio: <http://purl.org/spar/fabio/>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
INSERT DATA {
<http://id.pensoft.net/subjects/someid> a fabio:SubjectDiscipline ;
dc:title "sometitle" .
}'
query = gsub("someid", uuid, query)
query = gsub("sometitle", as.character(s), query)
query
r = graphDbExec(query, update = TRUE)
graphDbOptions = list(
server = "http://213.191.204.69:7777/graphdb" ,
user = "obkms" ,
password = "1obkms"
)
graphDbOptions
getGraphDbProtocol = function( options = graphDbOptions ) {
protocolEndpoint = "/protocol"
getURL( paste(options$server, protocolEndpoint, sep = ""), verbose = TRUE )
}
getGraphDbProtocol()
getGraphDbProtocol = function( options = graphDbOptions ) {
protocolEndpoint = "/protocol"
getURL( paste(options$server, protocolEndpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd)
}
graphDbOptions = list(
server = "http://213.191.204.69:7777/graphdb" ,
userpwd = "obkms:1obkms"
)
getGraphDbProtocol()
getGraphDbProtocol = function( options = graphDbOptions ) {
protocolEndpoint = "/protocol"
getURL( paste(options$server, protocolEndpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
}
getGraphDbProtocol = function( options = graphDbOptions ) {
protocolEndpoint = "/protocol"
getURL( paste(options$server, protocolEndpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
getGraphDbProtocol()
getRdfProtocol = function( options = graphDbOptions ) {
protocolEndpoint = "/protocol"
getURL( paste(options$server, protocolEndpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
getRdfProtocol()
getRdfRepos = function( options = graphDbOptions ) {
endpoint = "/repositories"
getURL( paste(options$server, protocolEndpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
getRdfRepos()
getRdfRepos = function( options = graphDbOptions ) {
endpoint = "/repositories"
getURL( paste(options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
getRdfRepos()
getRdfRepos = function( options = graphDbOptions ) {
endpoint = "/repositories"
getURL( paste(options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5"))
}
getRdfRepos
getRdfRepos()
getRdfRepos = function( options = graphDbOptions ) {
endpoint = "/repositories"
getURL( paste(options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = "application/sparql-results+csv, */*;q=0.5"))
}
getRdfRepos()
getRdfRepos = function( options = graphDbOptions ) {
endpoint = "/repositories"
getURL( paste(options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5"))
}
r = getRdfRepos()
r
xmlParse(r)
r = getURL( paste(options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5"))
d = xmlParse(r)
}
library(xml)
library(XML)
d = xmlParse(r)
d
getNodeSet(d, "//head/variable")
d
ns = getNodeSet(d, "//head/variable")
ns
sapply(ns, function(el) xmlGetAttr(el, "name"))
l = sapply(ns, function(el) xmlGetAttr(el, "name"))
l
ns
ns[1]
ns[2]
ns[3]
ns = getNodeSet(d, "/head/variable")
ns
ns[1]
d
ns = getNodeSet(d, "//head")
ns
ns[1]
ns
ns = getNodeSet(d, "//sparql/head")
ns
ns[1]
d
ns = getNodeSet(d, "//head/")
ns = getNodeSet(d, "//head")
ns[[1]]
ns[1]
length(ns)
ns = getNodeSet(d, "//results")
ns
class(d)
ns = getNodeSet(d, "/sparql/results")
ns
ns[1]
d
ns = getNodeSet(d, "//")
ns = getNodeSet(d, "/sparql/head")
ns
d
ns
ns[1]
ns = getNodeSet(d, "/sparql/head/hgjhg")
ns
d = xmlInternalTreeParse(r)
d
ns = getNodeSet(d, "/sparql/head")
ns
d
xmlChildren(d)
xmlChildren(d)$sparql
xmlChildren(xmlChildren(d)$spaqrl)
xmlChildren(d)$sparql
xmlChildren(xmlChildren(d)$sparql)
xmlChildren(xmlChildren(xmlChildren(d)$sparql)$head)
ns = getNodeSet(d, "/sparql/head")
ns
ns[1]
d
d = xmlParse(r)
d = xmlTreeParse(r)
d
ns = getNodeSet(d, "/sparql/head")
r
d = xmlTreeParse(TextConnection(r))
d = xmlTreeParse(textConnection(r))
textConnection(r)
d = xmlTreeParse(textConnection(r))
d = xmlTreeParse(file = textConnection(r))
?xmlParse
d = xmlTreeParse(r, asText = TRUE)
d
ns = getNodeSet(d, "//head")
d = xmlTreeParse(r, asText = TRUE)
ns = getNodeSet(d, "//head")
ns = getNodeSet(d, "/sparql/head")
d = xmlInternalTreeParse(r, asText = TRUE)
ns = getNodeSet(d, "/sparql/head")
ns
ns[1]
d = xmlTreeParse(r, asText = TRUE)
d
ns = getNodeSet(d, "//head")
ns = getNodeSet(d, "//xmlns:head", "xmlns")
d = xmlTreeParse(r, asText = TRUE, useInternalNodes = TRUE)
s
d
ns = getNodeSet(d, "//xmlns:head", "xmlns")
ns
ns = getNodeSet(d, "//head")
ns
ns = getNodeSet(d, "//xmlns:head", "xmlns")
d = xmlTreeParse(r, asText = TRUE, useInternalNodes = TRUE)
ns = getNodeSet(d, "//xmlns:head", "xmlns")
ns
ns = getNodeSet(d, "//x:head", "x")
ns
ns = getNodeSet(d, "//x:head/variable", "x")
ns
ns = getNodeSet(d, "//x:head/x:variable", "x")
ns
sapply(ns, function(n){ xmlGetAttr(n, "name"") } )
)
)
}
sapply(ns,
function(n)
{ xmlGetAttr(n, "name) } )
sapply( ns, function(n) { xmlGetAttr(n, "name") } )
ns = getNodeSet(d, "//x:results/x:result/binding[@name='uri']", "x")
ns
ns = getNodeSet(d, "//x:results/x:result/binding", "x")
ns
d
ns = getNodeSet(d, "//x:results/x:result/x:binding", "x")
ns
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'uri'", "x")
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'uri']", "x")
ns
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'uri']/uri", "x")
ns
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'uri']/x:uri", "x")
ns
uri = sapply (ns, function (n), xmlValue(n))
uri = sapply (ns, xmlValue)
uri
d
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'id']/x:uri", "x")
id = sapply (ns, xmlValue)
id
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'id']/x:literal", "x")
id = sapply (ns, xmlValue)
id
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'title']/x:literal", "x")
title = sapply (ns, xmlValue)
title
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'readable']/x:literal", "x")
readable = sapply (ns, xmlValue)
readable
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'writable']/x:literal", "x")
writable = sapply (ns, xmlValue)
data.frame(uri, id, title, readable, writable)
getRdfRepos = function( options = graphDbOptions ) {
endpoint = "/repositories"
r = getURL( paste(options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5"))
cols = c("uri", "id", "title", "readable", "writable")
d = xmlTreeParse(r, asText = TRUE, useInternalNodes = TRUE)
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'uri']/x:uri", "x")
uri = sapply (ns, xmlValue)
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'id']/x:literal", "x")
id = sapply (ns, xmlValue)
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'title']/x:literal", "x")
title = sapply (ns, xmlValue)
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'title']/x:literal", "x")
title = sapply (ns, xmlValue)
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'readable']/x:literal", "x")
readable = sapply (ns, xmlValue)
ns = getNodeSet(d, "//x:results/x:result/x:binding[@name = 'writable']/x:literal", "x")
writable = sapply (ns, xmlValue)
data.frame(uri, id, title, readable, writable)
}
getRdfRepos()
getRdfProtocol()
getRdfQueryRepo = function ( options = graphDbOptions, repoId, query, accept = "application/sparql-results+xml, */*;q=0.5", queryLn = "sparql", infer = "true", varbindings = "", timeout = "0" ) {
endpoint = paste( options$server, "/repositories/", repoId, sep = "")
r = getURL( paste( endpoint, "?query=", query, sep = "") , verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = accept))
}
getRdfRepos()
getRdfQuery = function ( options = graphDbOptions, repoId, query, accept = "application/sparql-results+xml, */*;q=0.5", queryLn = "sparql", infer = "true", varbindings = "", timeout = "0" ) {
endpoint = paste( options$server, "/repositories/", repoId, sep = "")
r = getURL( paste( endpoint, "?query=", query, sep = "") , verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = accept))
}
query = "SELECT (COUNT(*) as ?count)
FROM <http://www.ontotext.com/implicit>
WHERE {
?s ?p ?o .
}"
getRdfQuery(repoId = "OBKMS", query = query)
debug(getRdfQuery)
getRdfQuery(repoId = "OBKMS", query = query)
paste( endpoint, "?query=", query, sep = "")
q
getRdfQuery = function ( options = graphDbOptions, repoId, query, accept = "application/sparql-results+xml, */*;q=0.5", queryLn = "sparql", infer = "true", varbindings = "", timeout = "0" ) {
endpoint = paste( options$server, "/repositories/", repoId, sep = "")
r = getURL( paste( endpoint, "?query=", URLEncode(query), sep = "") , verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = accept))
}
getRdfQuery(repoId = "OBKMS", query = query)
getRdfQuery = function ( options = graphDbOptions, repoId, query, accept = "application/sparql-results+xml, */*;q=0.5", queryLn = "sparql", infer = "true", varbindings = "", timeout = "0" ) {
endpoint = paste( options$server, "/repositories/", repoId, sep = "")
r = getURL( paste( endpoint, "?query=", URLencode(query), sep = "") , verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = accept))
}
getRdfQuery(repoId = "OBKMS", query = query)
getRdfRepos()
getRdfQuery(repoId = "OBKMS", query = query)
getRdfQuery = function ( options = graphDbOptions, repoId, query, accept = "application/sparql-results+xml, */*;q=0.5", queryLn = "sparql", infer = "true", varbindings = "", timeout = "0" ) {
endpoint = paste( options$server, "/repositories/", repoId, sep = "")
r = getURL( paste( endpoint, "?query=", URLencode(query), "&queryLn=",queryLn, sep = "") , verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L, httpheader = c(Accept = accept))
}
getRdfQuery(repoId = "OBKMS", query = query)
graphDbOptions$userpwd
getRdfRepos()
getRdfRepos()
query
getRdfQuery(repoId = "OBKMS", query = query)
graphDbOptions = list(
server = "https://rdf.s4.ontotext.com/4937448214/OBKMS" ,
userpwd = "vsenderov:1obkms"
)
getRdfProtocol()
graphDbOptions = list(
server = "https://rdf.s4.ontotext.com/4937448214/OBKMS" ,
userpwd = "datascience@pensoft.net:1obkms"
)
getRdfProtocol()
graphDbOptions = list(
server = "https://rdf.s4.ontotext.com/4937448214/OBKMS" ,
userpwd = "vsenderov:1obkms"
)
getRdfProtocol()
graphDbOptions = list(
protocol = "https://",
server = "rdf.s4.ontotext.com/4937448214/OBKMS" ,
userpwd = "vsenderov:1obkms" ,
api_key = "s4i0k6o7v6l0" ,
secret = "9k03ah49e3da607"
)
getRdfProtocol = function( options = graphDbOptions , auth = "basic") {
endpoint = "/protocol"
if ( auth == "basic" ) {
getURL( paste(options$protocol, options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
else { #API-KEY Authentication
getURL( paste(options$protocol, options$api_key, ":", options$secret, "@", options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
}
getRdfProtocol(auth = "api")
debug(getRdfProtocol)
getRdfProtocol(auth = "api")
getRdfProtocol(auth = "api")
paste(options$protocol, options$api_key, ":", options$secret, "@", options$server, endpoint, sep = "")
getURL( paste(options$protocol, options$api_key, ":", options$secret, "@", options$server, endpoint, sep = ""), verbose = TRUE)
getRdfProtocol = function( options = graphDbOptions , auth = "basic") {
endpoint = "/protocol"
if ( auth == "basic" ) {
getURL( paste(options$protocol, options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
else { #API-KEY Authentication
getURL( paste(options$protocol, options$api_key, ":", options$secret, "@", options$server, endpoint, sep = ""), verbose = TRUE, userpwd = graphDbOptions$userpwd, httpauth = 1L)
}
}
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
