foo <- bar = "hi"
foo
bar
foo = 5
foo <- bar = "hi again"
uluvvietk0ng
library(devtools)
library("devtools")
install.packages("devtools")
library(devtools)
devtools::use_readme_rmd()
?use_readme_rmd
create_rdf4j_server_options = function (protocol = "http://", server, authentication = "http", userpwd, api_key, secret) {
if (authentication == "http") {
return ( list(
protocol = protocol,
server = server,
authentication = authentication,
userpwd = userpwd
) )
}
else {
return ( list (
protocol = protocol,
server = server,
authentication = "api",
api_key = api_key ,
secret = secret
))
}
}
OPTIONS = create_rdf4j_server_options(protocol = "http://", server = "213.191.204.69:7777/graphdb", authentication = "http", userpwd = "obkmns:1obkms")
OPTIONS
RDF4J_OPTIONS = OPTIONS
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5")
postForm( url,
query = query, .opts = list (httpheader = httpheader))
)
}
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5")
postForm( url,
query = query, .opts = list (httpheader = httpheader))
}
postRdfQuery("OBKMS", "SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D")
RDF4J_OPTIONS
postRdfQuery(RDF4J_OPTIONS, "OBKMS", "SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D")
library(RCurl)
postForm
postRdfQuery(RDF4J_OPTIONS, "OBKMS", "SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D")
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5")
postForm( url,
query = query, httpheader = httpheader)
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", "SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D")
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5") ,
verbose = TRUE),
curl = curl)
postForm( url,
query = query, curl = curl)
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", "SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D")
query
query = "SELECT (COUNT(*) as ?count)
FROM <http://www.ontotext.com/implicit>
WHERE {
?s ?p ?o .
}
"
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
RDF4J_OPTIONS$server = paste(RDF4J_OPTIONS$server, "/", sep = "")
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
r = postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
r
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5") ,
verbose = TRUE), userpwd = graphDbOptions$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl)
}
r = postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl)
}
r = postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
RDF4J_OPTIONS
RDF4J_OPTIONS$userpwd
RDF4J_OPTIONS$userpwd = "obkmns:1obkms"
r = postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
RDF4J_OPTIONS
RDF4J_OPTIONS$userpwd = "obkms:1obkms"
r = postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
r
RDF4J_OPTIONS$server
RDF4J_OPTIONS$server = "213.191.204.69:7777/graphdb"
r = postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, "/repositories", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl)
}
r = postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl)
}
r = postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
debug(postRdfQuery)
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl)
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
debug(postRdfQuery)
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
cur
curl
curlGetHeaders(curl)
httpPOST(url, list(query = query), curl)
httpPOST(url, c(query = query), curl)
httpPOST(url, query = query, curl)
postForm(url, query = query, curl)
postForm(curl, query = query)
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
query
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl, style style = "POST")
}
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl,  style = "POST")
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
# many issues here, see http://stackoverflow.com/questions/5797688/post-request-using-rcurl ,  more specifically comments by Duncan
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+csv") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl,  style = "POST")
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
# many issues here, see http://stackoverflow.com/questions/5797688/post-request-using-rcurl ,  more specifically comments by Duncan
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+csv, */*;q=0.5") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl,  style = "POST")
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
# many issues here, see http://stackoverflow.com/questions/5797688/post-request-using-rcurl ,  more specifically comments by Duncan
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+tsv, */*;q=0.5") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl,  style = "POST")
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
# many issues here, see http://stackoverflow.com/questions/5797688/post-request-using-rcurl ,  more specifically comments by Duncan
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "application/sparql-results+xml, */*;q=0.5") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl,  style = "POST")
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
postRdfQuery = function ( options = RDF4J_OPTIONS, repoId, query, accept = "XML", queryLn = "SPARQL", infer = "true", varbindings, timeout = "0" ) {
# need to construct a POST query
# curl -u obkms:1obkms -X POST --header "Accept:application/sparql-results+xml" --data   "query=SELECT%20(COUNT(*)%20as%20?count)%0AFROM%20%3Chttp://www.ontotext.com/implicit%3E%0AWHERE%20%7B%0A%20%20%20?s%20?p%20?o%20.%0A%7D" http://213.191.204.69:7777/graphdb/repositories/OBKMS
# many issues here, see http://stackoverflow.com/questions/5797688/post-request-using-rcurl ,  more specifically comments by Duncan
url  = paste(options$protocol, options$server, "/repositories/", repoId, sep = "")
httpheader = c(Accept = "application/sparql-results+xml")
curl = getCurlHandle()
# Note the header that extends across two lines with the second line
# prefixed with white space.
curlSetOpt( .opts = list(httpheader = c(Accept = "text/csv, */*;q=0.5") ,
verbose = TRUE), userpwd = options$userpwd, httpauth = 1L,
curl = curl)
postForm( url,
query = query, curl = curl,  style = "POST")
}
postRdfQuery(RDF4J_OPTIONS, "OBKMS", query = query)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
getwd()
setwd("/media/viktor/www/main/vsenderov.backup/TaxPub2RDF/exec")
setwd("/media/viktor/www/main/vsenderov.backup/TaxPub2RDF/exec")
library("../../rdf4jr/rdf4jr/rdf4jr")
?library
library(rdf4jr)
.libPaths()
command_line_args = c("config.yml", "article1.xml")
configuration_file = command_line_args[ 1 ]
taxpubs = command_line_args[ 2:length( command_line_args ) ]
obkms_options = yaml::yaml.load_file( configuration_file )
obkms_options$userpwd = Sys.getenv("OBKMS_SECRET")
obkms_options
?Sys.getenv
Sys.getenv("fds")
library(xml2)
library(rdf4jr)
get_protocol_version( obkms_options )
get_repositories( obkms_options )
